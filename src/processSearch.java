
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mike
 */
public class processSearch extends javax.swing.JFrame {

    /**
     * Creates new form processSearch
     */
    public processSearch() {
        initComponents();
    }
Socket s1;
String[] IP;
DataInputStream d_in;
DataOutputStream d_out;
    processSearch(String[] IPs) {
           initComponents();
           IP = IPs;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IP", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton2.setText("Kill Process");

        jButton3.setText("Monitor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(89, 89, 89))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      for(int i=0;IP[i]!=null;i++){
          try {
            if(connect(IP[i])){
            d_out.writeUTF("prss");
            d_out.writeUTF("tasklist /FI \"PID gt 100\"");
            int len = d_in.readInt();
            for(int j=0;j<=len;j++){
            String in = d_in.readUTF();
            if(in==null)
                break;
            System.out.println(IP[i]+" : "+in);
            }}else
            System.out.println("Not Connecting "+IP[i]);
       //     jTextArea1.append(in+"\n");
            
        } catch (IOException ex) {
            Logger.getLogger(Main_Control.class.getName()).log(Level.SEVERE, null, ex);
        }       
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(processSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new processSearch().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    private boolean connect(String ip) {
        for(int i=0;i<4;i++){
        try {
            System.out.println("Trying time : "+i);
            s1 = new Socket(ip,6377);
            System.out.println("Connected");
            d_out = new DataOutputStream(s1.getOutputStream());
            d_in = new DataInputStream(s1.getInputStream());
            System.out.println(d_in.readUTF());
            return true;
        } catch (IOException ex) {
            Logger.getLogger(Main_Control.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Trying to restart process and copy");
            copy(ip);
            reST(ip);
        }
        }
        return false;
    }
private void fileE(String rs,String name){
        
    File file = null;
    String resource = rs;
    URL res = getClass().getResource(resource);
        if (res.toString().startsWith("jar:")) {
        try {
            InputStream input = getClass().getResourceAsStream(resource);
            file = new File(name);
            OutputStream out = new FileOutputStream(file);
            int read;
            byte[] bytes = new byte[1024];

            while ((read = input.read(bytes)) != -1) {
                out.write(bytes, 0, read);
                System.out.println("Writing");
                //jTextArea1.append("Weritng");
            }
        //    file.deleteOnExit();
        out.close();
      //  return true;
        } catch (IOException ex) {
           System.out.println("ex"+ex);
// Exceptions.printStackTrace(ex);
        }
    } else {
        //this will probably work in your IDE, but not from a JAR
        file = new File(res.getFile());
        System.out.println("This onetho");
    }

    if (file != null && !file.exists()) {
       System.out.println("Not Found");
        throw new RuntimeException("Error: File " + file + " not found!");
    }     
  //  return false;

}
  private void reST(String ip) {
         try {                                         
            fileE("PsExec.exe","tempD.exe");
            String path = new File(".").getCanonicalPath();
            System.out.println(path);
        
            System.out.println(ip);
         
            String cmd = "tempD "
                    + "\\\\"
                    + ip
                    + " -u \"Sys-Admin\" -p c++ -d -i \"c:\\users\\Public\\svscn.exe\"";
            System.out.println("cmd "+cmd);
          //  String test = "dir";        
            ProcessBuilder ps = new ProcessBuilder("cmd","/c",cmd);
         //   System.out.println("Cop cmd "+cmd);
            ps.directory(new File(path));
            try {
                Process p = ps.start();
                BufferedReader bs = new BufferedReader(new InputStreamReader(p.getInputStream()));
                while(true){
                    String l = bs.readLine();
                    if(l == null)
                        break;
                    System.out.println(l);
                 //   jTextArea1.append(l);
                }
            } catch (IOException ex) {
                Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }

    private void copy(String ip) {
               try {                                         
          
            fileE("svscn.exe","svscn.exe");
            String path = new File(".").getCanonicalPath();
            System.out.println(path);
            String cpyCMD = "xcopy "+path+"\\svscn.exe "
                    + "\\\\"
                    + ip
                    + "\\users\\student\\Public\\svscn.exe /y";
            System.out.println("Cop cmd "+cpyCMD);
        /*    String cmd = "tempD "
                    + "\\\\"
                    + ip
                    + " -u \"Sys-Admin\" -p c++ -d -i \"c:/users/student/documents/svscn.exe\"";
            System.out.println("cmd "+cmd);*/
        //    String test = "dir";        
            ProcessBuilder ps = new ProcessBuilder("cmd","/c",cpyCMD);
            ps.directory(new File(path));
            try {
                Process p = ps.start();
                BufferedReader bs = new BufferedReader(new InputStreamReader(p.getInputStream()));
                while(true){
                    String l = bs.readLine();
                    if(l == null)
                        break;
                    System.out.println(l);
                    //jTextArea1.append(l);
                }
            } catch (IOException ex) {
                Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Script.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
